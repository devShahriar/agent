// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package tracer

import (
	_ "embed"
	"fmt"

	"github.com/cilium/ebpf"
)

// loadBpf loads the BPF programs and maps from the embedded object file.
func loadBpf() (*bpfObjects, error) {
	return loadBpfObjects(nil)
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or loadBpfProgram.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or loadBpfMaps.
type bpfMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or loadBpfPrograms.
type bpfPrograms struct {
	TraceSslRead  *ebpf.Program `ebpf:"trace_ssl_read"`
	TraceSslWrite *ebpf.Program `ebpf:"trace_ssl_write"`
}

// loadBpfObjects loads all BPF objects into the kernel.
func loadBpfObjects(options *ebpf.CollectionOptions) (*bpfObjects, error) {
	// This is just a stub implementation for development purposes.
	// The actual implementation would load the BPF objects from an ELF file.
	return &bpfObjects{
		bpfPrograms: bpfPrograms{
			TraceSslRead:  nil,
			TraceSslWrite: nil,
		},
		bpfMaps: bpfMaps{
			Events: nil,
		},
	}, fmt.Errorf("BPF program loading is stubbed out for development")
}

// Close closes all maps and programs associated with the bpfObjects.
func (o *bpfObjects) Close() error {
	// This is just a stub implementation for development purposes.
	return nil
}
